# Generated by Django 5.2.2 on 2025-06-06 17:18

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('icon', models.CharField(blank=True, help_text='Icon class from your icon library', max_length=50, verbose_name='icon')),
            ],
            options={
                'verbose_name': 'service category',
                'verbose_name_plural': 'service categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('service_type', models.CharField(choices=[('teaching', 'Teaching/Tutoring'), ('assignment', 'Assignment Help'), ('consulting', 'Academic Consulting'), ('other', 'Other Service')], max_length=20, verbose_name='service type')),
                ('pricing_model', models.CharField(choices=[('hourly', 'Hourly Rate'), ('fixed', 'Fixed Price'), ('free', 'Free Service')], max_length=20, verbose_name='pricing model')),
                ('rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='rate')),
                ('is_free', models.BooleanField(default=False, verbose_name='is free')),
                ('is_available', models.BooleanField(default=True, verbose_name='is available')),
                ('available_from', models.DateField(blank=True, null=True, verbose_name='available from')),
                ('available_to', models.DateField(blank=True, null=True, verbose_name='available to')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('views', models.PositiveIntegerField(default=0, verbose_name='views')),
                ('provider', models.ForeignKey(limit_choices_to={'user_type': 1}, on_delete=django.db.models.deletion.CASCADE, related_name='services_offered', to=settings.AUTH_USER_MODEL, verbose_name='provider')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='services.servicecategory', verbose_name='category')),
            ],
            options={
                'verbose_name': 'service',
                'verbose_name_plural': 'services',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='service_images/', verbose_name='image')),
                ('caption', models.CharField(blank=True, max_length=100, verbose_name='caption')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='services.service', verbose_name='service')),
            ],
            options={
                'verbose_name': 'service image',
                'verbose_name_plural': 'service images',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(verbose_name='message')),
                ('proposed_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='proposed rate')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to=settings.AUTH_USER_MODEL, verbose_name='requester')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='services.service', verbose_name='service')),
            ],
            options={
                'verbose_name': 'service request',
                'verbose_name_plural': 'service requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '★☆☆☆☆'), (2, '★★☆☆☆'), (3, '★★★☆☆'), (4, '★★★★☆'), (5, '★★★★★')], verbose_name='rating')),
                ('comment', models.TextField(blank=True, verbose_name='comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_reviews', to=settings.AUTH_USER_MODEL, verbose_name='reviewer')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='services.service', verbose_name='service')),
            ],
            options={
                'verbose_name': 'service review',
                'verbose_name_plural': 'service reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['slug'], name='services_se_slug_4657d0_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['service_type'], name='services_se_service_9fa833_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['pricing_model'], name='services_se_pricing_ff09f4_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['is_available'], name='services_se_is_avai_db1380_idx'),
        ),
        migrations.AddConstraint(
            model_name='servicerequest',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'pending')), fields=('service', 'requester'), name='unique_pending_request'),
        ),
        migrations.AddConstraint(
            model_name='servicereview',
            constraint=models.UniqueConstraint(fields=('service', 'reviewer'), name='one_review_per_user'),
        ),
    ]
